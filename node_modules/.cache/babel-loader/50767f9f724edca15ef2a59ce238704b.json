{"ast":null,"code":"import { ADD_QUANTITY, ADD_TO_CART, REMOVE_ITEM, SUB_QUANTITY } from \"./action-types/cart-actions\";\nexport const addToCart = addedItems => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    const profile = getState().firebase.profile;\n    const userId = getState().firebase.auth.uid;\n    let state = getState();\n    console.log(\"cartActions: add to cart\");\n    console.log(state);\n    let itemToAdd = state.cart.addedItems.find(item => item.id === addedItems.id);\n\n    if (itemToAdd === undefined) {\n      addedItems.quantity = 1;\n      firestore.collection('carts').add({\n        addedItems,\n        customerFirstName: profile.firstName,\n        customerLastName: profile.lastName,\n        customerId: userId,\n        shoppedAt: new Date()\n      }).then(() => {\n        dispatch({\n          type: ADD_TO_CART,\n          addedItems\n        });\n      }).catch(err => {\n        dispatch({\n          type: \"ADD_TO_CART_ERROR\",\n          err\n        });\n      });\n    } else {\n      firestore.collection('carts').where('addedItems.id', '==', addedItems.id).get().then(snapshot => {\n        snapshot.forEach(doc => {\n          addedItems.quantity += 1;\n          console.log(doc.id);\n          firestore.collection('carts').doc(doc.id).update({\n            addedItems: addedItems,\n            shoppedAt: new Date()\n          }).then(() => {\n            console.log('updated');\n            dispatch({\n              type: ADD_QUANTITY,\n              addedItems\n            });\n          }).catch(err => {\n            dispatch({\n              type: \"ADD_TO_CART_ERROR\",\n              err\n            });\n          });\n        });\n      });\n    }\n  };\n};\nexport const removeItem = removedItems => {\n  console.log(\"removedItem\");\n  console.log(removedItems); // const id = removedItem.id.toString();\n  // const cartsId = document.id;\n  // console.log(\"dispatch\", removedItems.addedItems.id);\n\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    let itemToRemove = getState().cart.addedItems.find(item => item.id === removedItems.id);\n    console.log('itemToRemove', itemToRemove);\n    firestore.collection('carts').where('addedItems.id', '==', itemToRemove.id).get().then(snapshot => {\n      snapshot.forEach(doc => {\n        console.log(doc.id);\n        firestore.collection('carts').doc(doc.id).delete().then(() => {\n          console.log('delete document successfully');\n          dispatch({\n            type: REMOVE_ITEM,\n            removedItems\n          });\n        });\n      });\n    }).catch(err => {\n      console.log('delete failed');\n      dispatch({\n        type: \"REMOVE_ITEM_ERROR\",\n        err\n      });\n    });\n  };\n};\nexport const addQuantity = addQuantityItem => {\n  console.log(\"addQuantityItem:\", addQuantityItem);\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firestore = getFirestore(); // let itemToAddQuantity = getState().cart.addedItems.find(item => item.id === addQuantityItem.id);\n    // console.log('itemToAddQuantity', itemToAddQuantity);\n\n    firestore.collection('carts').where(\"addedItems.id\", '==', addQuantityItem.id).get().then(snapshot => {\n      snapshot.forEach(doc => {\n        addQuantityItem.quantity += 1;\n        console.log('test quantity:', doc.id);\n        console.log('add quantity successfully');\n        firestore.collection('carts').doc(doc.id).update({\n          addedItems: addQuantityItem,\n          shoppedAt: new Date()\n        }).then(() => {\n          console.log('updated');\n          dispatch({\n            type: ADD_QUANTITY,\n            addQuantityItem\n          });\n        }).catch(err => {\n          dispatch({\n            type: \"ADD_QUANTITY_ERROR\",\n            err\n          });\n        });\n      });\n    });\n  };\n};\nexport const subtractQuantity = subtractQuantityItem => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    firestore.collection('carts').delete({\n      customerFirstName: 'Raj',\n      customerLastName: 'Koothrappali',\n      customerId: 12345,\n      shoppedAt: new Date()\n    }).then(() => {\n      dispatch({\n        type: SUB_QUANTITY,\n        subtractQuantityItem\n      });\n    }).catch(err => {\n      dispatch({\n        type: \"SUB_QUANTITY_ERROR\",\n        err\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/suya/Desktop/front end study/webProjects/shopping-cart/src/components/actions/cartActions.js"],"names":["ADD_QUANTITY","ADD_TO_CART","REMOVE_ITEM","SUB_QUANTITY","addToCart","addedItems","dispatch","getState","getFirebase","getFirestore","firestore","profile","firebase","userId","auth","uid","state","console","log","itemToAdd","cart","find","item","id","undefined","quantity","collection","add","customerFirstName","firstName","customerLastName","lastName","customerId","shoppedAt","Date","then","type","catch","err","where","get","snapshot","forEach","doc","update","removeItem","removedItems","itemToRemove","delete","addQuantity","addQuantityItem","subtractQuantity","subtractQuantityItem"],"mappings":"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","sourcesContent":["import {ADD_QUANTITY, ADD_TO_CART, REMOVE_ITEM, SUB_QUANTITY} from \"./action-types/cart-actions\";\n\nexport const addToCart = (addedItems) => {\n    return (dispatch, getState, {getFirebase, getFirestore}) => {\n        const firestore = getFirestore();\n        const profile = getState().firebase.profile;\n        const userId = getState().firebase.auth.uid;\n        let state = getState();\n        console.log(\"cartActions: add to cart\");\n        console.log(state);\n        let itemToAdd = state.cart.addedItems.find(item => item.id === addedItems.id);\n        if (itemToAdd === undefined) {\n            addedItems.quantity = 1;\n            firestore.collection('carts').add({\n                addedItems,\n                customerFirstName: profile.firstName,\n                customerLastName: profile.lastName,\n                customerId: userId,\n                shoppedAt: new Date()\n            }).then(() => {\n                dispatch({type: ADD_TO_CART, addedItems});\n            }).catch(err => {\n                dispatch({type: \"ADD_TO_CART_ERROR\", err});\n            });\n        } else {\n            firestore.collection('carts').where('addedItems.id', '==', addedItems.id)\n                .get().then((snapshot) => {\n                snapshot.forEach((doc) => {\n                        addedItems.quantity += 1;\n                        console.log(doc.id);\n                        firestore.collection('carts').doc(doc.id).update({\n                            addedItems: addedItems,\n                            shoppedAt: new Date()\n                        }).then(() => {\n                            console.log('updated');\n                            dispatch({type: ADD_QUANTITY, addedItems});\n                        }).catch(err => {\n                            dispatch({type: \"ADD_TO_CART_ERROR\", err});\n                        });\n                    })\n            })\n        }\n    }\n};\n\nexport const removeItem = (removedItems) => {\n    console.log(\"removedItem\");\n    console.log(removedItems);\n    // const id = removedItem.id.toString();\n    // const cartsId = document.id;\n    // console.log(\"dispatch\", removedItems.addedItems.id);\n    return (dispatch, getState, {getFirebase, getFirestore}) => {\n        const firestore = getFirestore();\n        let itemToRemove = getState().cart.addedItems.find(item => item.id === removedItems.id);\n        console.log('itemToRemove', itemToRemove);\n\n        firestore.collection('carts').where('addedItems.id', '==', itemToRemove.id)\n            .get().then((snapshot) => {\n            snapshot.forEach((doc) => {\n                    console.log(doc.id);\n                    firestore.collection('carts').doc(doc.id).delete().then(() => {\n                        console.log('delete document successfully')\n                        dispatch({type: REMOVE_ITEM, removedItems});\n                    });\n                }\n            )\n        }).catch(err => {\n            console.log('delete failed');\n            dispatch({type: \"REMOVE_ITEM_ERROR\", err});\n        })\n    }\n};\n\nexport const addQuantity = (addQuantityItem) => {\n    console.log(\"addQuantityItem:\", addQuantityItem);\n    return (dispatch, getState, {getFirebase, getFirestore}) => {\n        const firestore = getFirestore();\n        // let itemToAddQuantity = getState().cart.addedItems.find(item => item.id === addQuantityItem.id);\n        // console.log('itemToAddQuantity', itemToAddQuantity);\n        firestore.collection('carts').where(\"addedItems.id\", '==', addQuantityItem.id)\n            .get().then((snapshot) => {\n            snapshot.forEach((doc => {\n                    addQuantityItem.quantity += 1;\n                    console.log('test quantity:', doc.id);\n                    console.log('add quantity successfully');\n                    firestore.collection('carts').doc(doc.id).update({\n                        addedItems: addQuantityItem,\n                        shoppedAt: new Date()\n                    }).then(() => {\n                        console.log('updated');\n                        dispatch({type: ADD_QUANTITY, addQuantityItem});\n                    }).catch(err => {\n                        dispatch({type: \"ADD_QUANTITY_ERROR\", err});\n                    });\n                })\n            )\n        });\n    }\n};\n\n\nexport const subtractQuantity = (subtractQuantityItem) => {\n    return (dispatch, getState, {getFirebase, getFirestore}) => {\n        const firestore = getFirestore();\n        firestore.collection('carts').delete({\n\n            customerFirstName: 'Raj',\n            customerLastName: 'Koothrappali',\n            customerId: 12345,\n            shoppedAt: new Date()\n        }).then(() => {\n            dispatch({type: SUB_QUANTITY, subtractQuantityItem});\n        }).catch(err => {\n            dispatch({type: \"SUB_QUANTITY_ERROR\", err});\n        })\n    }\n};\n"]},"metadata":{},"sourceType":"module"}