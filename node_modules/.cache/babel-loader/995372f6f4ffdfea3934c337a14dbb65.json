{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2019 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst convert_1 = require(\"./convert\");\n\nconst field_value_1 = require(\"./field-value\");\n\nconst field_value_2 = require(\"./field-value\");\n\nconst geo_point_1 = require(\"./geo-point\");\n\nconst index_1 = require(\"./index\");\n\nconst path_1 = require(\"./path\");\n\nconst timestamp_1 = require(\"./timestamp\");\n\nconst util_1 = require(\"./util\");\n\nconst validate_1 = require(\"./validate\");\n/**\n * The maximum depth of a Firestore object.\n *\n * @private\n */\n\n\nconst MAX_DEPTH = 20;\n/**\n * Serializer that is used to convert between JavaScript types and their\n * Firestore Protobuf representation.\n *\n * @private\n */\n\nclass Serializer {\n  constructor(firestore) {\n    // Instead of storing the `firestore` object, we store just a reference to\n    // its `.doc()` method. This avoid a circular reference, which breaks\n    // JSON.stringify().\n    this.createReference = path => firestore.doc(path);\n\n    this.allowUndefined = !!firestore._settings.ignoreUndefinedProperties;\n  }\n  /**\n   * Encodes a JavaScript object into the Firestore 'Fields' representation.\n   *\n   * @private\n   * @param obj The object to encode.\n   * @returns The Firestore 'Fields' representation\n   */\n\n\n  encodeFields(obj) {\n    const fields = {};\n\n    for (const prop of Object.keys(obj)) {\n      const val = this.encodeValue(obj[prop]);\n\n      if (val) {\n        fields[prop] = val;\n      }\n    }\n\n    return fields;\n  }\n  /**\n   * Encodes a JavaScript value into the Firestore 'Value' representation.\n   *\n   * @private\n   * @param val The object to encode\n   * @returns The Firestore Proto or null if we are deleting a field.\n   */\n\n\n  encodeValue(val) {\n    if (val instanceof field_value_1.FieldTransform) {\n      return null;\n    }\n\n    if (typeof val === 'string') {\n      return {\n        stringValue: val\n      };\n    }\n\n    if (typeof val === 'boolean') {\n      return {\n        booleanValue: val\n      };\n    }\n\n    if (typeof val === 'number') {\n      if (Number.isSafeInteger(val)) {\n        return {\n          integerValue: val\n        };\n      } else {\n        return {\n          doubleValue: val\n        };\n      }\n    }\n\n    if (val instanceof Date) {\n      const timestamp = timestamp_1.Timestamp.fromDate(val);\n      return {\n        timestampValue: {\n          seconds: timestamp.seconds,\n          nanos: timestamp.nanoseconds\n        }\n      };\n    }\n\n    if (isMomentJsType(val)) {\n      const timestamp = timestamp_1.Timestamp.fromDate(val.toDate());\n      return {\n        timestampValue: {\n          seconds: timestamp.seconds,\n          nanos: timestamp.nanoseconds\n        }\n      };\n    }\n\n    if (val === null) {\n      return {\n        nullValue: 'NULL_VALUE'\n      };\n    }\n\n    if (val instanceof Buffer || val instanceof Uint8Array) {\n      return {\n        bytesValue: val\n      };\n    }\n\n    if (util_1.isObject(val)) {\n      const toProto = val['toProto'];\n\n      if (typeof toProto === 'function') {\n        return toProto.bind(val)();\n      }\n    }\n\n    if (val instanceof Array) {\n      const array = {\n        arrayValue: {}\n      };\n\n      if (val.length > 0) {\n        array.arrayValue.values = [];\n\n        for (let i = 0; i < val.length; ++i) {\n          const enc = this.encodeValue(val[i]);\n\n          if (enc) {\n            array.arrayValue.values.push(enc);\n          }\n        }\n      }\n\n      return array;\n    }\n\n    if (typeof val === 'object' && util_1.isPlainObject(val)) {\n      const map = {\n        mapValue: {}\n      }; // If we encounter an empty object, we always need to send it to make sure\n      // the server creates a map entry.\n\n      if (!util_1.isEmpty(val)) {\n        map.mapValue.fields = this.encodeFields(val);\n\n        if (util_1.isEmpty(map.mapValue.fields)) {\n          return null;\n        }\n      }\n\n      return map;\n    }\n\n    if (val === undefined && this.allowUndefined) {\n      return null;\n    }\n\n    throw new Error(`Cannot encode value: ${val}`);\n  }\n  /**\n   * Decodes a single Firestore 'Value' Protobuf.\n   *\n   * @private\n   * @param proto A Firestore 'Value' Protobuf.\n   * @returns The converted JS type.\n   */\n\n\n  decodeValue(proto) {\n    const valueType = convert_1.detectValueType(proto);\n\n    switch (valueType) {\n      case 'stringValue':\n        {\n          return proto.stringValue;\n        }\n\n      case 'booleanValue':\n        {\n          return proto.booleanValue;\n        }\n\n      case 'integerValue':\n        {\n          return Number(proto.integerValue);\n        }\n\n      case 'doubleValue':\n        {\n          return Number(proto.doubleValue);\n        }\n\n      case 'timestampValue':\n        {\n          const timestamp = timestamp_1.Timestamp.fromProto(proto.timestampValue);\n          return timestamp;\n        }\n\n      case 'referenceValue':\n        {\n          const resourcePath = path_1.QualifiedResourcePath.fromSlashSeparatedString(proto.referenceValue);\n          return this.createReference(resourcePath.relativeName);\n        }\n\n      case 'arrayValue':\n        {\n          const array = [];\n\n          if (Array.isArray(proto.arrayValue.values)) {\n            for (const value of proto.arrayValue.values) {\n              array.push(this.decodeValue(value));\n            }\n          }\n\n          return array;\n        }\n\n      case 'nullValue':\n        {\n          return null;\n        }\n\n      case 'mapValue':\n        {\n          const obj = {};\n          const fields = proto.mapValue.fields;\n\n          if (fields) {\n            for (const prop of Object.keys(fields)) {\n              obj[prop] = this.decodeValue(fields[prop]);\n            }\n          }\n\n          return obj;\n        }\n\n      case 'geoPointValue':\n        {\n          return geo_point_1.GeoPoint.fromProto(proto.geoPointValue);\n        }\n\n      case 'bytesValue':\n        {\n          return proto.bytesValue;\n        }\n\n      default:\n        {\n          throw new Error('Cannot decode type from Firestore Value: ' + JSON.stringify(proto));\n        }\n    }\n  }\n\n}\n\nexports.Serializer = Serializer;\n/**\n * Validates a JavaScript value for usage as a Firestore value.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param value JavaScript value to validate.\n * @param desc A description of the expected type.\n * @param path The field path to validate.\n * @param options Validation options\n * @param level The current depth of the traversal. This is used to decide\n * whether undefined values or deletes are allowed.\n * @param inArray Whether we are inside an array.\n * @throws when the object is invalid.\n */\n\nfunction validateUserInput(arg, value, desc, options, path, level, inArray) {\n  if (path && path.size > MAX_DEPTH) {\n    throw new Error(`${validate_1.invalidArgumentMessage(arg, desc)} Input object is deeper than ${MAX_DEPTH} levels or contains a cycle.`);\n  }\n\n  options = options || {};\n  level = level || 0;\n  inArray = inArray || false;\n  const fieldPathMessage = path ? ` (found in field \"${path}\")` : '';\n\n  if (Array.isArray(value)) {\n    for (let i = 0; i < value.length; ++i) {\n      validateUserInput(arg, value[i], desc, options, path ? path.append(String(i)) : new path_1.FieldPath(String(i)), level + 1,\n      /* inArray= */\n      true);\n    }\n  } else if (util_1.isPlainObject(value)) {\n    for (const prop of Object.keys(value)) {\n      validateUserInput(arg, value[prop], desc, options, path ? path.append(new path_1.FieldPath(prop)) : new path_1.FieldPath(prop), level + 1, inArray);\n    }\n  } else if (value === undefined) {\n    if (options.allowUndefined && level === 0) {\n      throw new Error(`${validate_1.invalidArgumentMessage(arg, desc)} \"undefined\" values are only ignored in object properties.`);\n    } else if (!options.allowUndefined) {\n      throw new Error(`${validate_1.invalidArgumentMessage(arg, desc)} Cannot use \"undefined\" as a Firestore value${fieldPathMessage}. ` + 'If you want to ignore undefined values, enable `ignoreUndefinedProperties`.');\n    }\n  } else if (value instanceof field_value_2.DeleteTransform) {\n    if (inArray) {\n      throw new Error(`${validate_1.invalidArgumentMessage(arg, desc)} ${value.methodName}() cannot be used inside of an array${fieldPathMessage}.`);\n    } else if (options.allowDeletes === 'root' && level !== 0 || options.allowDeletes === 'none') {\n      throw new Error(`${validate_1.invalidArgumentMessage(arg, desc)} ${value.methodName}() must appear at the top-level and can only be used in update() or set() with {merge:true}${fieldPathMessage}.`);\n    }\n  } else if (value instanceof field_value_1.FieldTransform) {\n    if (inArray) {\n      throw new Error(`${validate_1.invalidArgumentMessage(arg, desc)} ${value.methodName}() cannot be used inside of an array${fieldPathMessage}.`);\n    } else if (!options.allowTransforms) {\n      throw new Error(`${validate_1.invalidArgumentMessage(arg, desc)} ${value.methodName}() can only be used in set(), create() or update()${fieldPathMessage}.`);\n    }\n  } else if (value instanceof path_1.FieldPath) {\n    throw new Error(`${validate_1.invalidArgumentMessage(arg, desc)} Cannot use object of type \"FieldPath\" as a Firestore value${fieldPathMessage}.`);\n  } else if (value instanceof index_1.DocumentReference) {// Ok.\n  } else if (value instanceof geo_point_1.GeoPoint) {// Ok.\n  } else if (value instanceof timestamp_1.Timestamp || value instanceof Date) {// Ok.\n  } else if (isMomentJsType(value)) {// Ok.\n  } else if (value instanceof Buffer || value instanceof Uint8Array) {// Ok.\n  } else if (value === null) {// Ok.\n  } else if (typeof value === 'object') {\n    throw new Error(validate_1.customObjectMessage(arg, value, path));\n  }\n}\n\nexports.validateUserInput = validateUserInput;\n/**\n * Returns true if value is a MomentJs date object.\n * @private\n */\n\nfunction isMomentJsType(value) {\n  return typeof value === 'object' && value !== null && value.constructor && value.constructor.name === 'Moment' && // tslint:disable-next-line:no-any\n  typeof value.toDate === 'function';\n}","map":{"version":3,"sources":["/Users/suya/Desktop/front end study/webProjects/shopping-cart/node_modules/@google-cloud/firestore/build/src/serializer.js"],"names":["Object","defineProperty","exports","value","convert_1","require","field_value_1","field_value_2","geo_point_1","index_1","path_1","timestamp_1","util_1","validate_1","MAX_DEPTH","Serializer","constructor","firestore","createReference","path","doc","allowUndefined","_settings","ignoreUndefinedProperties","encodeFields","obj","fields","prop","keys","val","encodeValue","FieldTransform","stringValue","booleanValue","Number","isSafeInteger","integerValue","doubleValue","Date","timestamp","Timestamp","fromDate","timestampValue","seconds","nanos","nanoseconds","isMomentJsType","toDate","nullValue","Buffer","Uint8Array","bytesValue","isObject","toProto","bind","Array","array","arrayValue","length","values","i","enc","push","isPlainObject","map","mapValue","isEmpty","undefined","Error","decodeValue","proto","valueType","detectValueType","fromProto","resourcePath","QualifiedResourcePath","fromSlashSeparatedString","referenceValue","relativeName","isArray","GeoPoint","geoPointValue","JSON","stringify","validateUserInput","arg","desc","options","level","inArray","size","invalidArgumentMessage","fieldPathMessage","append","String","FieldPath","DeleteTransform","methodName","allowDeletes","allowTransforms","DocumentReference","customObjectMessage","name"],"mappings":"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","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2019 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst convert_1 = require(\"./convert\");\nconst field_value_1 = require(\"./field-value\");\nconst field_value_2 = require(\"./field-value\");\nconst geo_point_1 = require(\"./geo-point\");\nconst index_1 = require(\"./index\");\nconst path_1 = require(\"./path\");\nconst timestamp_1 = require(\"./timestamp\");\nconst util_1 = require(\"./util\");\nconst validate_1 = require(\"./validate\");\n/**\n * The maximum depth of a Firestore object.\n *\n * @private\n */\nconst MAX_DEPTH = 20;\n/**\n * Serializer that is used to convert between JavaScript types and their\n * Firestore Protobuf representation.\n *\n * @private\n */\nclass Serializer {\n    constructor(firestore) {\n        // Instead of storing the `firestore` object, we store just a reference to\n        // its `.doc()` method. This avoid a circular reference, which breaks\n        // JSON.stringify().\n        this.createReference = path => firestore.doc(path);\n        this.allowUndefined = !!firestore._settings.ignoreUndefinedProperties;\n    }\n    /**\n     * Encodes a JavaScript object into the Firestore 'Fields' representation.\n     *\n     * @private\n     * @param obj The object to encode.\n     * @returns The Firestore 'Fields' representation\n     */\n    encodeFields(obj) {\n        const fields = {};\n        for (const prop of Object.keys(obj)) {\n            const val = this.encodeValue(obj[prop]);\n            if (val) {\n                fields[prop] = val;\n            }\n        }\n        return fields;\n    }\n    /**\n     * Encodes a JavaScript value into the Firestore 'Value' representation.\n     *\n     * @private\n     * @param val The object to encode\n     * @returns The Firestore Proto or null if we are deleting a field.\n     */\n    encodeValue(val) {\n        if (val instanceof field_value_1.FieldTransform) {\n            return null;\n        }\n        if (typeof val === 'string') {\n            return {\n                stringValue: val,\n            };\n        }\n        if (typeof val === 'boolean') {\n            return {\n                booleanValue: val,\n            };\n        }\n        if (typeof val === 'number') {\n            if (Number.isSafeInteger(val)) {\n                return {\n                    integerValue: val,\n                };\n            }\n            else {\n                return {\n                    doubleValue: val,\n                };\n            }\n        }\n        if (val instanceof Date) {\n            const timestamp = timestamp_1.Timestamp.fromDate(val);\n            return {\n                timestampValue: {\n                    seconds: timestamp.seconds,\n                    nanos: timestamp.nanoseconds,\n                },\n            };\n        }\n        if (isMomentJsType(val)) {\n            const timestamp = timestamp_1.Timestamp.fromDate(val.toDate());\n            return {\n                timestampValue: {\n                    seconds: timestamp.seconds,\n                    nanos: timestamp.nanoseconds,\n                },\n            };\n        }\n        if (val === null) {\n            return {\n                nullValue: 'NULL_VALUE',\n            };\n        }\n        if (val instanceof Buffer || val instanceof Uint8Array) {\n            return {\n                bytesValue: val,\n            };\n        }\n        if (util_1.isObject(val)) {\n            const toProto = val['toProto'];\n            if (typeof toProto === 'function') {\n                return toProto.bind(val)();\n            }\n        }\n        if (val instanceof Array) {\n            const array = {\n                arrayValue: {},\n            };\n            if (val.length > 0) {\n                array.arrayValue.values = [];\n                for (let i = 0; i < val.length; ++i) {\n                    const enc = this.encodeValue(val[i]);\n                    if (enc) {\n                        array.arrayValue.values.push(enc);\n                    }\n                }\n            }\n            return array;\n        }\n        if (typeof val === 'object' && util_1.isPlainObject(val)) {\n            const map = {\n                mapValue: {},\n            };\n            // If we encounter an empty object, we always need to send it to make sure\n            // the server creates a map entry.\n            if (!util_1.isEmpty(val)) {\n                map.mapValue.fields = this.encodeFields(val);\n                if (util_1.isEmpty(map.mapValue.fields)) {\n                    return null;\n                }\n            }\n            return map;\n        }\n        if (val === undefined && this.allowUndefined) {\n            return null;\n        }\n        throw new Error(`Cannot encode value: ${val}`);\n    }\n    /**\n     * Decodes a single Firestore 'Value' Protobuf.\n     *\n     * @private\n     * @param proto A Firestore 'Value' Protobuf.\n     * @returns The converted JS type.\n     */\n    decodeValue(proto) {\n        const valueType = convert_1.detectValueType(proto);\n        switch (valueType) {\n            case 'stringValue': {\n                return proto.stringValue;\n            }\n            case 'booleanValue': {\n                return proto.booleanValue;\n            }\n            case 'integerValue': {\n                return Number(proto.integerValue);\n            }\n            case 'doubleValue': {\n                return Number(proto.doubleValue);\n            }\n            case 'timestampValue': {\n                const timestamp = timestamp_1.Timestamp.fromProto(proto.timestampValue);\n                return timestamp;\n            }\n            case 'referenceValue': {\n                const resourcePath = path_1.QualifiedResourcePath.fromSlashSeparatedString(proto.referenceValue);\n                return this.createReference(resourcePath.relativeName);\n            }\n            case 'arrayValue': {\n                const array = [];\n                if (Array.isArray(proto.arrayValue.values)) {\n                    for (const value of proto.arrayValue.values) {\n                        array.push(this.decodeValue(value));\n                    }\n                }\n                return array;\n            }\n            case 'nullValue': {\n                return null;\n            }\n            case 'mapValue': {\n                const obj = {};\n                const fields = proto.mapValue.fields;\n                if (fields) {\n                    for (const prop of Object.keys(fields)) {\n                        obj[prop] = this.decodeValue(fields[prop]);\n                    }\n                }\n                return obj;\n            }\n            case 'geoPointValue': {\n                return geo_point_1.GeoPoint.fromProto(proto.geoPointValue);\n            }\n            case 'bytesValue': {\n                return proto.bytesValue;\n            }\n            default: {\n                throw new Error('Cannot decode type from Firestore Value: ' + JSON.stringify(proto));\n            }\n        }\n    }\n}\nexports.Serializer = Serializer;\n/**\n * Validates a JavaScript value for usage as a Firestore value.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param value JavaScript value to validate.\n * @param desc A description of the expected type.\n * @param path The field path to validate.\n * @param options Validation options\n * @param level The current depth of the traversal. This is used to decide\n * whether undefined values or deletes are allowed.\n * @param inArray Whether we are inside an array.\n * @throws when the object is invalid.\n */\nfunction validateUserInput(arg, value, desc, options, path, level, inArray) {\n    if (path && path.size > MAX_DEPTH) {\n        throw new Error(`${validate_1.invalidArgumentMessage(arg, desc)} Input object is deeper than ${MAX_DEPTH} levels or contains a cycle.`);\n    }\n    options = options || {};\n    level = level || 0;\n    inArray = inArray || false;\n    const fieldPathMessage = path ? ` (found in field \"${path}\")` : '';\n    if (Array.isArray(value)) {\n        for (let i = 0; i < value.length; ++i) {\n            validateUserInput(arg, value[i], desc, options, path ? path.append(String(i)) : new path_1.FieldPath(String(i)), level + 1, \n            /* inArray= */ true);\n        }\n    }\n    else if (util_1.isPlainObject(value)) {\n        for (const prop of Object.keys(value)) {\n            validateUserInput(arg, value[prop], desc, options, path ? path.append(new path_1.FieldPath(prop)) : new path_1.FieldPath(prop), level + 1, inArray);\n        }\n    }\n    else if (value === undefined) {\n        if (options.allowUndefined && level === 0) {\n            throw new Error(`${validate_1.invalidArgumentMessage(arg, desc)} \"undefined\" values are only ignored in object properties.`);\n        }\n        else if (!options.allowUndefined) {\n            throw new Error(`${validate_1.invalidArgumentMessage(arg, desc)} Cannot use \"undefined\" as a Firestore value${fieldPathMessage}. ` +\n                'If you want to ignore undefined values, enable `ignoreUndefinedProperties`.');\n        }\n    }\n    else if (value instanceof field_value_2.DeleteTransform) {\n        if (inArray) {\n            throw new Error(`${validate_1.invalidArgumentMessage(arg, desc)} ${value.methodName}() cannot be used inside of an array${fieldPathMessage}.`);\n        }\n        else if ((options.allowDeletes === 'root' && level !== 0) ||\n            options.allowDeletes === 'none') {\n            throw new Error(`${validate_1.invalidArgumentMessage(arg, desc)} ${value.methodName}() must appear at the top-level and can only be used in update() or set() with {merge:true}${fieldPathMessage}.`);\n        }\n    }\n    else if (value instanceof field_value_1.FieldTransform) {\n        if (inArray) {\n            throw new Error(`${validate_1.invalidArgumentMessage(arg, desc)} ${value.methodName}() cannot be used inside of an array${fieldPathMessage}.`);\n        }\n        else if (!options.allowTransforms) {\n            throw new Error(`${validate_1.invalidArgumentMessage(arg, desc)} ${value.methodName}() can only be used in set(), create() or update()${fieldPathMessage}.`);\n        }\n    }\n    else if (value instanceof path_1.FieldPath) {\n        throw new Error(`${validate_1.invalidArgumentMessage(arg, desc)} Cannot use object of type \"FieldPath\" as a Firestore value${fieldPathMessage}.`);\n    }\n    else if (value instanceof index_1.DocumentReference) {\n        // Ok.\n    }\n    else if (value instanceof geo_point_1.GeoPoint) {\n        // Ok.\n    }\n    else if (value instanceof timestamp_1.Timestamp || value instanceof Date) {\n        // Ok.\n    }\n    else if (isMomentJsType(value)) {\n        // Ok.\n    }\n    else if (value instanceof Buffer || value instanceof Uint8Array) {\n        // Ok.\n    }\n    else if (value === null) {\n        // Ok.\n    }\n    else if (typeof value === 'object') {\n        throw new Error(validate_1.customObjectMessage(arg, value, path));\n    }\n}\nexports.validateUserInput = validateUserInput;\n/**\n * Returns true if value is a MomentJs date object.\n * @private\n */\nfunction isMomentJsType(value) {\n    return (typeof value === 'object' &&\n        value !== null &&\n        value.constructor &&\n        value.constructor.name === 'Moment' &&\n        // tslint:disable-next-line:no-any\n        typeof value.toDate === 'function');\n}\n//# sourceMappingURL=serializer.js.map"]},"metadata":{},"sourceType":"script"}